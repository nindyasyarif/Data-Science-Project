# Feature 1: Extract month and day from 'last_review'
df['last_review_month'] = df['last_review'].dt.month
df['last_review_day'] = df['last_review'].dt.day

# Feature 2: Geospatial Features (Calculating distance from central locations)
# Define central coordinates for Times Square and Central Park
times_square = (40.7580, -73.9855)
central_park = (40.785091, -73.968285)

# Function to calculate haversine distance
def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers
    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = np.sin(dlat / 2) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon / 2) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

# Calculate distance to Times Square and Central Park
df['distance_to_times_square'] = df.apply(lambda row: haversine(row['latitude'], row['longitude'], times_square[0], times_square[1]), axis=1)
df['distance_to_central_park'] = df.apply(lambda row: haversine(row['latitude'], row['longitude'], central_park[0], central_park[1]), axis=1)

# Using OneHotEncoder without specifying 'sparse' or 'sparse_output'
one_hot_encoder = OneHotEncoder(drop='first')  # Remove sparse-related parameters
room_type_encoded = one_hot_encoder.fit_transform(df[['room_type']]).toarray()  # Ensure the result is a dense array
room_type_encoded_df = pd.DataFrame(room_type_encoded, columns=one_hot_encoder.get_feature_names_out(['room_type']))
df = pd.concat([df, room_type_encoded_df], axis=1)

#Feature Interaction: interaksi antara variabel seperti availability_365 dan room_type
df['availability_365'] = pd.to_numeric(df['availability_365'], errors='coerce')
df['room_type_Private room'] = pd.to_numeric(df['room_type_Private room'], errors='coerce')
df['room_type_Shared room'] = pd.to_numeric(df['room_type_Shared room'], errors='coerce')

# Recalculate the interaction between availability_365 and room_type
df['availability_room_type_interaction'] = df['availability_365'] * (
    df['room_type_Private room'] + df['room_type_Shared room']
)

# Check the first few rows to confirm the calculation
print(df[['availability_365', 'room_type_Private room', 'room_type_Shared room', 'availability_room_type_interaction']].head())
